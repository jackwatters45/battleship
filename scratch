nextCoordinate = `${letters[rowIndex - 1]}${column}`;
if (
  !Object.keys(this.opponentGameboard.board).includes(nextCoordinate) ||
  this.opponentGameboard.board[nextCoordinate].attacked
)
  [rowIndex, ...column] = this.search.coordinate.split('');
else return nextCoordinate;

// if ship previously hit is not a part

if (this.moves.length > 0) {
  let previousMove = this.moves[this.moves.length - 1];

  // if ship was sunk last turn just use the random coordinate and reset search

  // if not currently searching and hit a ship add search data
  if (!this.search['searching'] && previousMove['coordinateData'].shipPlaced) {
    this.search['coordinate'] = previousMove['coordinate'];
    this.search['searching'] = 'above';
  }

  // if previous search finds a different ship than currently searching
  if (
    previousMove['coordinateData'].shipPlaced &&
    !previousMove['coordinateData'].shipPlaced['coordinates'].includes(
      this.search['coordinate']
    ) &&
    !previousMove['coordinateData']['shipplaced']['sunk']
  ) {
    // console.log(previousMove['coordinate']);
    this.search.queue.push(previousMove['coordinate']);
  }

  // TODO: definitely just turn to if statements
  nextCoordinate = previousMove['coordinateData'].shipPlaced
    ? this.#searchAround(previousMove['coordinate'])
    : (this.#getNextSearchDirection(),
      this.#searchAround(this.search['coordinate']));
}
// return this.attack(nextCoordinate);
